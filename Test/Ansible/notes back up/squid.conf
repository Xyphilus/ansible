#                       Supported Values: 1.0 (default), 1.1, 1.2
#
#       tls-options=... Specify various OpenSSL library options:
#
#                           NO_SSLv3    Disallow the use of SSLv3
#
#                           SINGLE_DH_USE
#                                     Always create a new key when using
#                                     temporary/ephemeral DH key exchanges
#
#                           ALL       Enable various bug workarounds
#                                     suggested as "harmless" by OpenSSL
#                                     Be warned that this reduces SSL/TLS
#                                     strength to some attacks.
#
#                       See the OpenSSL SSL_CTX_set_options documentation for a
#                       more complete list. Options relevant only to SSLv2 are
#                       not supported.
#
#       tls-cafile=     PEM file containing CA certificates to use when verifying
#                       the icap server certificate.
#                       Use to specify intermediate CA certificate(s) if not sent
#                       by the server. Or the full CA chain for the server when
#                       using the tls-default-ca=off flag.
#                       May be repeated to load multiple files.
#
#       tls-capath=...  A directory containing additional CA certificates to
#                       use when verifying the icap server certificate.
#                       Requires OpenSSL or LibreSSL.
#
#       tls-crlfile=... A certificate revocation list file to use when
#                       verifying the icap server certificate.
#
#       tls-flags=...   Specify various flags modifying the Squid TLS implementation:
#
#                       DONT_VERIFY_PEER
#                               Accept certificates even if they fail to
#                               verify.
#                       DONT_VERIFY_DOMAIN
#                               Don't verify the icap server certificate
#                               matches the server name
#
#       tls-default-ca[=off]
#                       Whether to use the system Trusted CAs. Default is ON.
#
#       tls-domain=     The icap server name as advertised in it's certificate.
#                       Used for verifying the correctness of the received icap
#                       server certificate. If not specified the icap server
#                       hostname extracted from ICAP URI will be used.
#
#       Older icap_service format without optional named parameters is
#       deprecated but supported for backward compatibility.
#
#Example:
#icap_service svcBlocker reqmod_precache icap://icap1.mydomain.net:1344/reqmod bypass=0
#icap_service svcLogger reqmod_precache icaps://icap2.mydomain.net:11344/reqmod routing=on
#Default:
# none

#  TAG: icap_class
#       This deprecated option was documented to define an ICAP service
#       chain, even though it actually defined a set of similar, redundant
#       services, and the chains were not supported. 
#
#       To define a set of redundant services, please use the
#       adaptation_service_set directive. For service chains, use
#       adaptation_service_chain.
#Default:
# none

#  TAG: icap_access
#       This option is deprecated. Please use adaptation_access, which
#       has the same ICAP functionality, but comes with better
#       documentation, and eCAP support.
#Default:
# none

# eCAP OPTIONS
# -----------------------------------------------------------------------------

#  TAG: ecap_enable     on|off
#       Controls whether eCAP support is enabled.
#Default:
# ecap_enable off

#  TAG: ecap_service
#       Defines a single eCAP service
#
#       ecap_service id vectoring_point uri [option ...]
#
#        id: ID
#               an opaque identifier or name which is used to direct traffic to
#               this specific service. Must be unique among all adaptation
#               services in squid.conf.
#
#       vectoring_point: reqmod_precache|reqmod_postcache|respmod_precache|respmod_postcache
#               This specifies at which point of transaction processing the
#               eCAP service should be activated. *_postcache vectoring points
#               are not yet supported.
#
#       uri: ecap://vendor/service_name?custom&cgi=style&parameters=optional
#               Squid uses the eCAP service URI to match this configuration
#               line with one of the dynamically loaded services. Each loaded
#               eCAP service must have a unique URI. Obtain the right URI from
#               the service provider.
#
#       To activate a service, use the adaptation_access directive. To group
#       services, use adaptation_service_chain and adaptation_service_set.
#
#       Service options are separated by white space. eCAP services support
#       the following name=value options:
#
#       bypass=on|off|1|0
#               If set to 'on' or '1', the eCAP service is treated as optional.
#               If the service cannot be reached or malfunctions, Squid will try
#               to ignore any errors and process the message as if the service
#               was not enabled. No all eCAP errors can be bypassed.
#               If set to 'off' or '0', the eCAP service is treated as essential
#               and all eCAP errors will result in an error page returned to the
#               HTTP client.
#
#                Bypass is off by default: services are treated as essential.
#
#       routing=on|off|1|0
#               If set to 'on' or '1', the eCAP service is allowed to
#               dynamically change the current message adaptation plan by
#               returning a chain of services to be used next.
#
#               Dynamic adaptation plan may cross or cover multiple supported
#               vectoring points in their natural processing order.
#
#               Routing is not allowed by default.
#
#       connection-encryption=on|off
#               Determines the eCAP service effect on the connections_encrypted
#               ACL. 
#
#               Defaults to "on", which does not taint the master transaction
#               w.r.t. that ACL.
#
#               Does not affect eCAP API calls.
#
#       Older ecap_service format without optional named parameters is
#       deprecated but supported for backward compatibility.
#
#
#Example:
#ecap_service s1 reqmod_precache ecap://filters.R.us/leakDetector?on_error=block bypass=off
#ecap_service s2 respmod_precache ecap://filters.R.us/virusFilter config=/etc/vf.cfg bypass=on
#Default:
# none

#  TAG: loadable_modules
#       Instructs Squid to load the specified dynamic module(s) or activate
#       preloaded module(s).
#Example:
#loadable_modules /usr/lib/MinimalAdapter.so
#Default:
# none

# MESSAGE ADAPTATION OPTIONS
# -----------------------------------------------------------------------------

#  TAG: adaptation_service_set
#
#       Configures an ordered set of similar, redundant services. This is
#       useful when hot standby or backup adaptation servers are available.
#
#           adaptation_service_set set_name service_name1 service_name2 ...
#
#       The named services are used in the set declaration order. The first
#       applicable adaptation service from the set is used first. The next
#       applicable service is tried if and only if the transaction with the
#       previous service fails and the message waiting to be adapted is still
#       intact.
#
#       When adaptation starts, broken services are ignored as if they were
#       not a part of the set. A broken service is a down optional service.
#
#       The services in a set must be attached to the same vectoring point
#       (e.g., pre-cache) and use the same adaptation method (e.g., REQMOD).
#
#       If all services in a set are optional then adaptation failures are
#       bypassable. If all services in the set are essential, then a
#       transaction failure with one service may still be retried using
#       another service from the set, but when all services fail, the master
#       transaction fails as well.
#
#       A set may contain a mix of optional and essential services, but that
#       is likely to lead to surprising results because broken services become
#       ignored (see above), making previously bypassable failures fatal.
#       Technically, it is the bypassability of the last failed service that
#       matters.
#
#       See also: adaptation_access adaptation_service_chain
#
#Example:
#adaptation_service_set svcBlocker urlFilterPrimary urlFilterBackup
#adaptation service_set svcLogger loggerLocal loggerRemote
#Default:
# none

#  TAG: adaptation_service_chain
#
#       Configures a list of complementary services that will be applied
#       one-by-one, forming an adaptation chain or pipeline. This is useful
#       when Squid must perform different adaptations on the same message.
#
#           adaptation_service_chain chain_name service_name1 svc_name2 ...
#
#       The named services are used in the chain declaration order. The first
#       applicable adaptation service from the chain is used first. The next
#       applicable service is applied to the successful adaptation results of
#       the previous service in the chain.
#
#       When adaptation starts, broken services are ignored as if they were
#       not a part of the chain. A broken service is a down optional service.
#
#       Request satisfaction terminates the adaptation chain because Squid
#       does not currently allow declaration of RESPMOD services at the
#       "reqmod_precache" vectoring point (see icap_service or ecap_service).
#
#       The services in a chain must be attached to the same vectoring point
#       (e.g., pre-cache) and use the same adaptation method (e.g., REQMOD).
#
#       A chain may contain a mix of optional and essential services. If an
#       essential adaptation fails (or the failure cannot be bypassed for
#       other reasons), the master transaction fails. Otherwise, the failure
#       is bypassed as if the failed adaptation service was not in the chain.
#
#       See also: adaptation_access adaptation_service_set
#
#Example:
#adaptation_service_chain svcRequest requestLogger urlFilter leakDetector
#Default:
# none

#  TAG: adaptation_access
#       Sends an HTTP transaction to an ICAP or eCAP adaptation service.
#
#       adaptation_access service_name allow|deny [!]aclname...
#       adaptation_access set_name     allow|deny [!]aclname...
#
#       At each supported vectoring point, the adaptation_access
#       statements are processed in the order they appear in this
#       configuration file. Statements pointing to the following services
#       are ignored (i.e., skipped without checking their ACL):
#
#           - services serving different vectoring points
#           - "broken-but-bypassable" services
#           - "up" services configured to ignore such transactions
#              (e.g., based on the ICAP Transfer-Ignore header).
#
#        When a set_name is used, all services in the set are checked
#       using the same rules, to find the first applicable one. See
#       adaptation_service_set for details.
#
#       If an access list is checked and there is a match, the
#       processing stops: For an "allow" rule, the corresponding
#       adaptation service is used for the transaction. For a "deny"
#       rule, no adaptation service is activated.
#
#       It is currently not possible to apply more than one adaptation
#       service at the same vectoring point to the same HTTP transaction.
#
#        See also: icap_service and ecap_service
#
#Example:
#adaptation_access service_1 allow all
#Default:
# Allow, unless rules exist in squid.conf.

#  TAG: adaptation_service_iteration_limit
#       Limits the number of iterations allowed when applying adaptation
#       services to a message. If your longest adaptation set or chain
#       may have more than 16 services, increase the limit beyond its
#       default value of 16. If detecting infinite iteration loops sooner
#       is critical, make the iteration limit match the actual number
#       of services in your longest adaptation set or chain.
#
#       Infinite adaptation loops are most likely with routing services.
#
#       See also: icap_service routing=1
#Default:
# adaptation_service_iteration_limit 16

#  TAG: adaptation_masterx_shared_names
#       For each master transaction (i.e., the HTTP request and response
#       sequence, including all related ICAP and eCAP exchanges), Squid
#       maintains a table of metadata. The table entries are (name, value)
#       pairs shared among eCAP and ICAP exchanges. The table is destroyed
#       with the master transaction.
#
#       This option specifies the table entry names that Squid must accept
#       from and forward to the adaptation transactions.
#
#       An ICAP REQMOD or RESPMOD transaction may set an entry in the 
#       shared table by returning an ICAP header field with a name 
#       specified in adaptation_masterx_shared_names.
#
#       An eCAP REQMOD or RESPMOD transaction may set an entry in the
#       shared table by implementing the libecap::visitEachOption() API
#       to provide an option with a name specified in
#       adaptation_masterx_shared_names.
#
#       Squid will store and forward the set entry to subsequent adaptation
#       transactions within the same master transaction scope.
#
#       Only one shared entry name is supported at this time.
#
#Example:
## share authentication information among ICAP services
#adaptation_masterx_shared_names X-Subscriber-ID
#Default:
# none

#  TAG: adaptation_meta
#       This option allows Squid administrator to add custom ICAP request
#       headers or eCAP options to Squid ICAP requests or eCAP transactions.
#       Use it to pass custom authentication tokens and other
#       transaction-state related meta information to an ICAP/eCAP service.
#
#       The addition of a meta header is ACL-driven:
#               adaptation_meta name value [!]aclname ...
#
#       Processing for a given header name stops after the first ACL list match.
#       Thus, it is impossible to add two headers with the same name. If no ACL
#       lists match for a given header name, no such header is added. For 
#       example:
#
#               # do not debug transactions except for those that need debugging
#               adaptation_meta X-Debug 1 needs_debugging
#
#               # log all transactions except for those that must remain secret
#               adaptation_meta X-Log 1 !keep_secret
#
#               # mark transactions from users in the "G 1" group
#               adaptation_meta X-Authenticated-Groups "G 1" authed_as_G1
#
#       The "value" parameter may be a regular squid.conf token or a "double
#       quoted string". Within the quoted string, use backslash (\) to escape
#       any character, which is currently only useful for escaping backslashes
#       and double quotes. For example,
#           "this string has one backslash (\\) and two \"quotes\""
#
#       Used adaptation_meta header values may be logged via %note
#       logformat code. If multiple adaptation_meta headers with the same name
#       are used during master transaction lifetime, the header values are
#       logged in the order they were used and duplicate values are ignored
#       (only the first repeated value will be logged).
#Default:
# none

#  TAG: icap_retry
#       This ACL determines which retriable ICAP transactions are
#       retried. Transactions that received a complete ICAP response
#       and did not have to consume or produce HTTP bodies to receive
#       that response are usually retriable.
#
#       icap_retry allow|deny [!]aclname ...
#
#       Squid automatically retries some ICAP I/O timeouts and errors
#       due to persistent connection race conditions.
#
#       See also: icap_retry_limit
#Default:
# icap_retry deny all

#  TAG: icap_retry_limit
#       Limits the number of retries allowed.
#
#       Communication errors due to persistent connection race
#       conditions are unavoidable, automatically retried, and do not
#       count against this limit.
#
#       See also: icap_retry
#Default:
# No retries are allowed.

# DNS OPTIONS
# -----------------------------------------------------------------------------

#  TAG: check_hostnames
#       For security and stability reasons Squid can check
#       hostnames for Internet standard RFC compliance. If you want
#       Squid to perform these checks turn this directive on.
#Default:
# check_hostnames off

#  TAG: allow_underscore
#       Underscore characters is not strictly allowed in Internet hostnames
#       but nevertheless used by many sites. Set this to off if you want
#       Squid to be strict about the standard.
#       This check is performed only when check_hostnames is set to on.
#Default:
# allow_underscore on

#  TAG: dns_retransmit_interval
#       Initial retransmit interval for DNS queries. The interval is
#       doubled each time all configured DNS servers have been tried.
#Default:
# dns_retransmit_interval 5 seconds

#  TAG: dns_timeout
#       DNS Query timeout. If no response is received to a DNS query
#       within this time all DNS servers for the queried domain
#       are assumed to be unavailable.
#Default:
# dns_timeout 30 seconds

#  TAG: dns_packet_max
#       Maximum number of bytes packet size to advertise via EDNS.
#       Set to "none" to disable EDNS large packet support.
#
#       For legacy reasons DNS UDP replies will default to 512 bytes which
#       is too small for many responses. EDNS provides a means for Squid to
#       negotiate receiving larger responses back immediately without having
#       to failover with repeat requests. Responses larger than this limit
#       will retain the old behaviour of failover to TCP DNS.
#
#       Squid has no real fixed limit internally, but allowing packet sizes
#       over 1500 bytes requires network jumbogram support and is usually not
#       necessary.
#
#       WARNING: The RFC also indicates that some older resolvers will reply
#       with failure of the whole request if the extension is added. Some
#       resolvers have already been identified which will reply with mangled
#       EDNS response on occasion. Usually in response to many-KB jumbogram
#       sizes being advertised by Squid.
#       Squid will currently treat these both as an unable-to-resolve domain
#       even if it would be resolvable without EDNS.
#Default:
# EDNS disabled

#  TAG: dns_defnames    on|off
#       Normally the RES_DEFNAMES resolver option is disabled
#       (see res_init(3)).  This prevents caches in a hierarchy
#       from interpreting single-component hostnames locally.  To allow
#       Squid to handle single-component names, enable this option.
#Default:
# Search for single-label domain names is disabled.

#  TAG: dns_multicast_local     on|off
#       When set to on, Squid sends multicast DNS lookups on the local
#       network for domains ending in .local and .arpa.
#       This enables local servers and devices to be contacted in an
#       ad-hoc or zero-configuration network environment.
#Default:
# Search for .local and .arpa names is disabled.

#  TAG: dns_nameservers
#       Use this if you want to specify a list of DNS name servers
#       (IP addresses) to use instead of those given in your
#       /etc/resolv.conf file.
#
#       On Windows platforms, if no value is specified here or in
#       the /etc/resolv.conf file, the list of DNS name servers are
#       taken from the Windows registry, both static and dynamic DHCP
#       configurations are supported.
#
#       Example: dns_nameservers 10.0.0.1 192.172.0.4
#Default:
# Use operating system definitions

#  TAG: hosts_file
#       Location of the host-local IP name-address associations
#       database. Most Operating Systems have such a file on different
#       default locations:
#       - Un*X & Linux:    /etc/hosts
#       - Windows NT/2000: %SystemRoot%\system32\drivers\etc\hosts
#                          (%SystemRoot% value install default is c:\winnt)
#       - Windows XP/2003: %SystemRoot%\system32\drivers\etc\hosts
#                          (%SystemRoot% value install default is c:\windows)
#       - Windows 9x/Me:   %windir%\hosts
#                          (%windir% value is usually c:\windows)
#       - Cygwin:          /etc/hosts
#
#       The file contains newline-separated definitions, in the
#       form ip_address_in_dotted_form name [name ...] names are
#       whitespace-separated. Lines beginning with an hash (#)
#       character are comments.
#
#       The file is checked at startup and upon configuration.
#       If set to 'none', it won't be checked.
#       If append_domain is used, that domain will be added to
#       domain-local (i.e. not containing any dot character) host
#       definitions.
#Default:
# hosts_file /etc/hosts

#  TAG: append_domain
#       Appends local domain name to hostnames without any dots in
#       them.  append_domain must begin with a period.
#
#       Be warned there are now Internet names with no dots in
#       them using only top-domain names, so setting this may
#       cause some Internet sites to become unavailable.
#
#Example:
# append_domain .yourdomain.com
#Default:
# Use operating system definitions

#  TAG: ignore_unknown_nameservers
#       By default Squid checks that DNS responses are received
#       from the same IP addresses they are sent to.  If they
#       don't match, Squid ignores the response and writes a warning
#       message to cache.log.  You can allow responses from unknown
#       nameservers by setting this option to 'off'.
#Default:
# ignore_unknown_nameservers on

#  TAG: dns_v4_first
#       With the IPv6 Internet being as fast or faster than IPv4 Internet
#       for most networks Squid prefers to contact websites over IPv6.
#
#       This option reverses the order of preference to make Squid contact
#       dual-stack websites over IPv4 first. Squid will still perform both
#       IPv6 and IPv4 DNS lookups before connecting.
#
#       WARNING:
#         This option will restrict the situations under which IPv6
#         connectivity is used (and tested), potentially hiding network
#         problems which would otherwise be detected and warned about.
#Default:
dns_v4_first on

#  TAG: ipcache_size    (number of entries)
#       Maximum number of DNS IP cache entries.
#Default:
# ipcache_size 1024

#  TAG: ipcache_low     (percent)
#Default:
# ipcache_low 90

#  TAG: ipcache_high    (percent)
#       The size, low-, and high-water marks for the IP cache.
#Default:
# ipcache_high 95

#  TAG: fqdncache_size  (number of entries)
#       Maximum number of FQDN cache entries.
#Default:
# fqdncache_size 1024

# MISCELLANEOUS
# -----------------------------------------------------------------------------

#  TAG: configuration_includes_quoted_values    on|off
#       If set, Squid will recognize each "quoted string" after a configuration
#       directive as a single parameter. The quotes are stripped before the
#       parameter value is interpreted or used.
#       See "Values with spaces, quotes, and other special characters"
#       section for more details.
#Default:
# configuration_includes_quoted_values off

#  TAG: memory_pools    on|off
#       If set, Squid will keep pools of allocated (but unused) memory
#       available for future use.  If memory is a premium on your
#       system and you believe your malloc library outperforms Squid
#       routines, disable this.
#Default:
# memory_pools on

#  TAG: memory_pools_limit      (bytes)
#       Used only with memory_pools on:
#       memory_pools_limit 50 MB
#
#       If set to a non-zero value, Squid will keep at most the specified
#       limit of allocated (but unused) memory in memory pools. All free()
#       requests that exceed this limit will be handled by your malloc
#       library. Squid does not pre-allocate any memory, just safe-keeps
#       objects that otherwise would be free()d. Thus, it is safe to set
#       memory_pools_limit to a reasonably high value even if your
#       configuration will use less memory.
#
#       If set to none, Squid will keep all memory it can. That is, there
#       will be no limit on the total amount of memory used for safe-keeping.
#
#       To disable memory allocation optimization, do not set
#       memory_pools_limit to 0 or none. Set memory_pools to "off" instead.
#
#       An overhead for maintaining memory pools is not taken into account
#       when the limit is checked. This overhead is close to four bytes per
#       object kept. However, pools may actually _save_ memory because of
#       reduced memory thrashing in your malloc library.
#Default:
# memory_pools_limit 5 MB

#  TAG: forwarded_for   on|off|transparent|truncate|delete
#       If set to "on", Squid will append your client's IP address
#       in the HTTP requests it forwards. By default it looks like:
#
#               X-Forwarded-For: 192.1.2.3
#
#       If set to "off", it will appear as
#
#               X-Forwarded-For: unknown
#
#       If set to "transparent", Squid will not alter the
#       X-Forwarded-For header in any way.
#
#       If set to "delete", Squid will delete the entire
#       X-Forwarded-For header.
#
#       If set to "truncate", Squid will remove all existing
#       X-Forwarded-For entries, and place the client IP as the sole entry.
#Default:
# forwarded_for on

#  TAG: cachemgr_passwd
#       Specify passwords for cachemgr operations.
#
#       Usage: cachemgr_passwd password action action ...
#
#       Some valid actions are (see cache manager menu for a full list):
#               5min
#               60min
#               asndb
#               authenticator
#               cbdata
#               client_list
#               comm_incoming
#               config *
#               counters
#               delay
#               digest_stats
#               dns
#               events
#               filedescriptors
#               fqdncache
#               histograms
#               http_headers
#               info
#               io
#               ipcache
#               mem
#               menu
#               netdb
#               non_peers
#               objects
#               offline_toggle *
#               pconn
#               peer_select
#               reconfigure *
#               redirector
#               refresh
#               server_list
#               shutdown *
#               store_digest
#               storedir
#               utilization
#               via_headers
#               vm_objects
#
#       * Indicates actions which will not be performed without a
#         valid password, others can be performed if not listed here.
#
#       To disable an action, set the password to "disable".
#       To allow performing an action without a password, set the
#       password to "none".
#
#       Use the keyword "all" to set the same password for all actions.
#
#Example:
# cachemgr_passwd secret shutdown
# cachemgr_passwd lesssssssecret info stats/objects
# cachemgr_passwd disable all
#Default:
# No password. Actions which require password are denied.

#  TAG: client_db       on|off
#       If you want to disable collecting per-client statistics,
#       turn off client_db here.
#Default:
# client_db on

#  TAG: refresh_all_ims on|off
#       When you enable this option, squid will always check
#       the origin server for an update when a client sends an
#       If-Modified-Since request.  Many browsers use IMS
#       requests when the user requests a reload, and this
#       ensures those clients receive the latest version.
#
#       By default (off), squid may return a Not Modified response
#       based on the age of the cached version.
#Default:
# refresh_all_ims off

#  TAG: reload_into_ims on|off
#       When you enable this option, client no-cache or ``reload''
#       requests will be changed to If-Modified-Since requests.
#       Doing this VIOLATES the HTTP standard.  Enabling this
#       feature could make you liable for problems which it
#       causes.
#
#       see also refresh_pattern for a more selective approach.
#Default:
# reload_into_ims off

#  TAG: connect_retries
#       Limits the number of reopening attempts when establishing a single
#       TCP connection. All these attempts must still complete before the
#       applicable connection opening timeout expires.
#
#       By default and when connect_retries is set to zero, Squid does not
#       retry failed connection opening attempts.
#
#       The (not recommended) maximum is 10 tries. An attempt to configure a
#       higher value results in the value of 10 being used (with a warning).
#
#       Squid may open connections to retry various high-level forwarding
#       failures. For an outside observer, that activity may look like a
#       low-level connection reopening attempt, but those high-level retries
#       are governed by forward_max_tries instead.
#
#       See also: connect_timeout, forward_timeout, icap_connect_timeout,
#       ident_timeout, and forward_max_tries.
#Default:
# Do not retry failed connections.

#  TAG: retry_on_error
#       If set to ON Squid will automatically retry requests when
#       receiving an error response with status 403 (Forbidden),
#       500 (Internal Error), 501 or 503 (Service not available).
#       Status 502 and 504 (Gateway errors) are always retried.
#
#       This is mainly useful if you are in a complex cache hierarchy to
#       work around access control errors.
#
#       NOTE: This retry will attempt to find another working destination.
#       Which is different from the server which just failed.
#Default:
# retry_on_error off

#  TAG: as_whois_server
#       WHOIS server to query for AS numbers.  NOTE: AS numbers are
#       queried only when Squid starts up, not for every request.
#Default:
# as_whois_server whois.ra.net

#  TAG: offline_mode
#       Enable this option and Squid will never try to validate cached
#       objects.
#Default:
# offline_mode off

#  TAG: uri_whitespace
#       What to do with requests that have whitespace characters in the
#       URI.  Options:
#
#       strip:  The whitespace characters are stripped out of the URL.
#               This is the behavior recommended by RFC2396 and RFC3986
#               for tolerant handling of generic URI.
#               NOTE: This is one difference between generic URI and HTTP URLs.
#
#       deny:   The request is denied.  The user receives an "Invalid
#               Request" message.
#               This is the behaviour recommended by RFC2616 for safe
#               handling of HTTP request URL.
#
#       allow:  The request is allowed and the URI is not changed.  The
#               whitespace characters remain in the URI.  Note the
#               whitespace is passed to redirector processes if they
#               are in use.
#               Note this may be considered a violation of RFC2616
#               request parsing where whitespace is prohibited in the
#               URL field.
#
#       encode: The request is allowed and the whitespace characters are
#               encoded according to RFC1738.
#
#       chop:   The request is allowed and the URI is chopped at the
#               first whitespace.
#
#
#       NOTE the current Squid implementation of encode and chop violates
#       RFC2616 by not using a 301 redirect after altering the URL.
#Default:
# uri_whitespace strip

#  TAG: chroot
#       Specifies a directory where Squid should do a chroot() while
#       initializing.  This also causes Squid to fully drop root
#       privileges after initializing.  This means, for example, if you
#       use a HTTP port less than 1024 and try to reconfigure, you may
#       get an error saying that Squid can not open the port.
#Default:
# none

#  TAG: pipeline_prefetch
#       HTTP clients may send a pipeline of 1+N requests to Squid using a
#       single connection, without waiting for Squid to respond to the first
#       of those requests. This option limits the number of concurrent
#       requests Squid will try to handle in parallel. If set to N, Squid
#       will try to receive and process up to 1+N requests on the same
#       connection concurrently.
#
#       Defaults to 0 (off) for bandwidth management and access logging
#       reasons.
#
#       NOTE: pipelining requires persistent connections to clients.
#
#       WARNING: pipelining breaks NTLM and Negotiate/Kerberos authentication.
#Default:
# Do not pre-parse pipelined requests.

#  TAG: high_response_time_warning      (msec)
#       If the one-minute median response time exceeds this value,
#       Squid prints a WARNING with debug level 0 to get the
#       administrators attention.  The value is in milliseconds.
#Default:
# disabled.

#  TAG: high_page_fault_warning
#       If the one-minute average page fault rate exceeds this
#       value, Squid prints a WARNING with debug level 0 to get
#       the administrators attention.  The value is in page faults
#       per second.
#Default:
# disabled.

#  TAG: high_memory_warning
# Note: This option is only available if Squid is rebuilt with the
#       GNU Malloc with mstats()
#
#       If the memory usage (as determined by gnumalloc, if available and used)
#       exceeds this amount, Squid prints a WARNING with debug level 0 to get
#       the administrators attention.
#Default:
# disabled.

#  TAG: sleep_after_fork        (microseconds)
#       When this is set to a non-zero value, the main Squid process
#       sleeps the specified number of microseconds after a fork()
#       system call. This sleep may help the situation where your
#       system reports fork() failures due to lack of (virtual)
#       memory. Note, however, if you have a lot of child
#       processes, these sleep delays will add up and your
#       Squid will not service requests for some amount of time
#       until all the child processes have been started.
#       On Windows value less then 1000 (1 milliseconds) are
#       rounded to 1000.
#Default:
# sleep_after_fork 0

#  TAG: windows_ipaddrchangemonitor     on|off
# Note: This option is only available if Squid is rebuilt with the
#       MS Windows
#
#       On Windows Squid by default will monitor IP address changes and will 
#       reconfigure itself after any detected event. This is very useful for
#       proxies connected to internet with dial-up interfaces.
#       In some cases (a Proxy server acting as VPN gateway is one) it could be
#       desiderable to disable this behaviour setting this to 'off'.
#       Note: after changing this, Squid service must be restarted.
#Default:
# windows_ipaddrchangemonitor on

#  TAG: eui_lookup
#       Whether to lookup the EUI or MAC address of a connected client.
#Default:
# eui_lookup on

#  TAG: max_filedescriptors
#       Set the maximum number of filedescriptors, either below the
#       operating system default or up to the hard limit.
#
#       Remove from squid.conf to inherit the current ulimit soft
#       limit setting.
#
#       Note: Changing this requires a restart of Squid. Also
#       not all I/O types supports large values (eg on Windows).
#Default:
# Use operating system soft limit set by ulimit.

#  TAG: force_request_body_continuation
#       This option controls how Squid handles data upload requests from HTTP
#       and FTP agents that require a "Please Continue" control message response
#       to actually send the request body to Squid. It is mostly useful in
#       adaptation environments.
#
#       When Squid receives an HTTP request with an "Expect: 100-continue"
#       header or an FTP upload command (e.g., STOR), Squid normally sends the
#       request headers or FTP command information to an adaptation service (or
#       peer) and waits for a response. Most adaptation services (and some
#       broken peers) may not respond to Squid at that stage because they may
#       decide to wait for the HTTP request body or FTP data transfer. However,
#       that request body or data transfer may never come because Squid has not
#       responded with the HTTP 100 or FTP 150 (Please Continue) control message
#       to the request sender yet!
#
#       An allow match tells Squid to respond with the HTTP 100 or FTP 150
#       (Please Continue) control message on its own, before forwarding the
#       request to an adaptation service or peer. Such a response usually forces
#       the request sender to proceed with sending the body. A deny match tells
#       Squid to delay that control response until the origin server confirms
#       that the request body is needed. Delaying is the default behavior.
#Default:
# Deny, unless rules exist in squid.conf.

#  TAG: server_pconn_for_nonretriable
#       This option provides fine-grained control over persistent connection
#       reuse when forwarding HTTP requests that Squid cannot retry. It is useful
#
#       (e.g., all connections are secured with TLS with complex client and server
#       certificate validation) and race conditions associated with persistent
#       connections are very rare and/or only cause minor problems.
#
#       HTTP prohibits retrying unsafe and non-idempotent requests (e.g., POST).
#       Squid limitations also prohibit retrying all requests with bodies (e.g., PUT).
#       By default, when forwarding such "risky" requests, Squid opens a new
#       connection to the server or cache_peer, even if there is an idle persistent
#       connection available. When Squid is configured to risk sending a non-retriable
#       request on a previously used persistent connection, and the server closes
#       the connection before seeing that risky request, the user gets an error response
#       from Squid. In most cases, that error response will be HTTP 502 (Bad Gateway)
#       with ERR_ZERO_SIZE_OBJECT or ERR_WRITE_ERROR (peer connection reset) error detail.
#
#       If an allow rule matches, Squid reuses an available idle persistent connection
#       (if any) for the request that Squid cannot retry. If a deny rule matches, then
#       Squid opens a new connection for the request that Squid cannot retry.
#
#       This option does not affect requests that Squid can retry. They will reuse idle
#       persistent connections (if any).
#
#       This clause only supports fast acl types.
#       See http://wiki.squid-cache.org/SquidFaq/SquidAcl for details.
#
#       Example:
#               acl SpeedIsWorthTheRisk method POST
#               server_pconn_for_nonretriable allow SpeedIsWorthTheRisk
#Default:
# Open new connections for forwarding requests Squid cannot retry safely.
max_filedescriptors 65535
root@proxy:/etc/squid# #  TAG: windows_ipaddrchangemonitor     on|off
root@proxy:/etc/squid# # Note: This option is only available if Squid is rebuilt with the
root@proxy:/etc/squid# #       MS Windows
root@proxy:/etc/squid# #
root@proxy:/etc/squid# #       On Windows Squid by default will monitor IP address changes and will 
root@proxy:/etc/squid# #       reconfigure itself after any detected event. This is very useful for
root@proxy:/etc/squid# #       proxies connected to internet with dial-up interfaces.
root@proxy:/etc/squid# #       In some cases (a Proxy server acting as VPN gateway is one) it could be
root@proxy:/etc/squid# #       desiderable to disable this behaviour setting this to 'off'.
root@proxy:/etc/squid# #       Note: after changing this, Squid service must be restarted.
root@proxy:/etc/squid# #Default:
root@proxy:/etc/squid# # windows_ipaddrchangemonitor on
root@proxy:/etc/squid# 
root@proxy:/etc/squid# #  TAG: eui_lookup
root@proxy:/etc/squid# #       Whether to lookup the EUI or MAC address of a connected client.
root@proxy:/etc/squid# #Default:
root@proxy:/etc/squid# # eui_lookup on
root@proxy:/etc/squid# 
root@proxy:/etc/squid# #  TAG: max_filedescriptors
root@proxy:/etc/squid# #       Set the maximum number of filedescriptors, either below the
root@proxy:/etc/squid# #       operating system default or up to the hard limit.
root@proxy:/etc/squid# #
root@proxy:/etc/squid# #       Remove from squid.conf to inherit the current ulimit soft
root@proxy:/etc/squid# #       limit setting.
root@proxy:/etc/squid# #
root@proxy:/etc/squid# #       Note: Changing this requires a restart of Squid. Also
root@proxy:/etc/squid# #       not all I/O types supports large values (eg on Windows).
root@proxy:/etc/squid# #Default:
root@proxy:/etc/squid# # Use operating system soft limit set by ulimit.
root@proxy:/etc/squid# 
root@proxy:/etc/squid# #  TAG: force_request_body_continuation
root@proxy:/etc/squid# #       This option controls how Squid handles data upload requests from HTTP
root@proxy:/etc/squid# #       and FTP agents that require a "Please Continue" control message response
root@proxy:/etc/squid# #       to actually send the request body to Squid. It is mostly useful in
root@proxy:/etc/squid# #       adaptation environments.
root@proxy:/etc/squid# #
root@proxy:/etc/squid# #       When Squid receives an HTTP request with an "Expect: 100-continue"
root@proxy:/etc/squid# #       header or an FTP upload command (e.g., STOR), Squid normally sends the
root@proxy:/etc/squid# #       request headers or FTP command information to an adaptation service (or
root@proxy:/etc/squid# #       peer) and waits for a response. Most adaptation services (and some
root@proxy:/etc/squid# #       broken peers) may not respond to Squid at that stage because they may
root@proxy:/etc/squid# #       decide to wait for the HTTP request body or FTP data transfer. However,
root@proxy:/etc/squid# #       that request body or data transfer may never come because Squid has not
root@proxy:/etc/squid# #       responded with the HTTP 100 or FTP 150 (Please Continue) control message
root@proxy:/etc/squid# #       to the request sender yet!
root@proxy:/etc/squid# #
root@proxy:/etc/squid# #       An allow match tells Squid to respond with the HTTP 100 or FTP 150
root@proxy:/etc/squid# #       (Please Continue) control message on its own, before forwarding the
root@proxy:/etc/squid# #       request to an adaptation service or peer. Such a response usually forces
root@proxy:/etc/squid# #       the request sender to proceed with sending the body. A deny match tells
root@proxy:/etc/squid# #       Squid to delay that control response until the origin server confirms
root@proxy:/etc/squid# #       that the request body is needed. Delaying is the default behavior.
root@proxy:/etc/squid# #Default:
root@proxy:/etc/squid# # Deny, unless rules exist in squid.conf.
root@proxy:/etc/squid# 
root@proxy:/etc/squid# #  TAG: server_pconn_for_nonretriable
root@proxy:/etc/squid# #       This option provides fine-grained control over persistent connection
root@proxy:/etc/squid# #       reuse when forwarding HTTP requests that Squid cannot retry. It is useful
root@proxy:/etc/squid# #
root@proxy:/etc/squid# #       (e.g., all connections are secured with TLS with complex client and server
root@proxy:/etc/squid# #       certificate validation) and race conditions associated with persistent
root@proxy:/etc/squid# #       connections are very rare and/or only cause minor problems.
root@proxy:/etc/squid# #
root@proxy:/etc/squid# #       HTTP prohibits retrying unsafe and non-idempotent requests (e.g., POST).
root@proxy:/etc/squid# #       Squid limitations also prohibit retrying all requests with bodies (e.g., PUT).
root@proxy:/etc/squid# #       By default, when forwarding such "risky" requests, Squid opens a new
root@proxy:/etc/squid# #       connection to the server or cache_peer, even if there is an idle persistent
root@proxy:/etc/squid# #       connection available. When Squid is configured to risk sending a non-retriable
root@proxy:/etc/squid# #       request on a previously used persistent connection, and the server closes
root@proxy:/etc/squid# #       the connection before seeing that risky request, the user gets an error response
root@proxy:/etc/squid# #       from Squid. In most cases, that error response will be HTTP 502 (Bad Gateway)
root@proxy:/etc/squid# #       with ERR_ZERO_SIZE_OBJECT or ERR_WRITE_ERROR (peer connection reset) error detail.
root@proxy:/etc/squid# #
root@proxy:/etc/squid# #       If an allow rule matches, Squid reuses an available idle persistent connection
root@proxy:/etc/squid# #       (if any) for the request that Squid cannot retry. If a deny rule matches, then
root@proxy:/etc/squid# #       Squid opens a new connection for the request that Squid cannot retry.
root@proxy:/etc/squid# #
root@proxy:/etc/squid# #       This option does not affect requests that Squid can retry. They will reuse idle
root@proxy:/etc/squid# #       persistent connections (if any).
root@proxy:/etc/squid# #
root@proxy:/etc/squid# #       This clause only supports fast acl types.
root@proxy:/etc/squid# #       See http://wiki.squid-cache.org/SquidFaq/SquidAcl for details.
root@proxy:/etc/squid# #
root@proxy:/etc/squid# #       Example:
root@proxy:/etc/squid# #               acl SpeedIsWorthTheRisk method POST
root@proxy:/etc/squid# #               server_pconn_for_nonretriable allow SpeedIsWorthTheRisk
root@proxy:/etc/squid# #Default:
root@proxy:/etc/squid# # Open new connections for forwarding requests Squid cannot retry safely.
root@proxy:/etc/squid# max_filedescriptors 65535